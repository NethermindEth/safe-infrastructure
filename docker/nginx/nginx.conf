# https://github.com/KyleAMathews/docker-nginx/blob/master/nginx.conf
# https://linode.com/docs/web-servers/nginx/configure-nginx-for-optimized-performance/
# https://docs.gunicorn.org/en/stable/deploy.html

worker_processes 1;

events {
  worker_connections 2000; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  use epoll; # Enable epoll for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
    include mime.types;
    # fallback in case we can't determine a type
    default_type application/octet-stream;
    sendfile on;

    ## Transaction Service
    upstream txs_app_server {
      # ip_hash; # For load-balancing
      #
      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response
      server unix:/nginx-txs/gunicorn.socket fail_timeout=0;

      # for a TCP configuration
      # server web:8000 fail_timeout=0;
      keepalive 32;
    }

    ## Config service
    upstream cfg_app_server {
      ip_hash;  # For load-balancing
      # server cfg-web:8001 fail_timeout=0;
      server unix:/nginx-cfg/gunicorn.socket fail_timeout=0;
      #
      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response
      keepalive 32;
    }

    ## Client gateway
    upstream cgw_app_server {
      ip_hash;  # For load-balancing
      server cgw-web:3000 fail_timeout=0;
      #
      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response
      keepalive 32;
    }

    upstream events_app_server {
      ip_hash;  # For load-balancing
      server events-web:3000 fail_timeout=0;
      #
      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response
      keepalive 32;
    }

    upstream ui_server {
      ip_hash;  # For load-balancing
      server ui:8080 fail_timeout=0;
      #
      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response
      keepalive 32;
    }

    server {
        # Listen on HTTP
        listen 8000 default_server;
        listen [::]:8000 default_server;
        server_name safe-ui.surge.wtf;

        # Redirect all HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }

        # Required for Let's Encrypt certificate validation
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
    }

    server {
        # Listen on HTTPS - Fix for deprecated http2 syntax
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;  # New syntax for enabling HTTP/2
        server_name safe-ui.surge.wtf;

        # SSL Configuration
        ssl_certificate ssl/certbot/conf/live/safe-ui.surge.wtf/fullchain.pem;
        ssl_certificate_key ssl/certbot/conf/live/safe-ui.surge.wtf/privkey.pem;
        ssl_trusted_certificate ssl/certbot/conf/live/safe-ui.surge.wtf/chain.pem;

        # SSL Security Configuration
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS (uncomment if you're sure)
        # add_header Strict-Transport-Security "max-age=63072000" always;

        # Move CORS headers inside location blocks
        location / {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' 'https://safe-ui.surge.wtf' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    Host                $host;
            proxy_redirect off;
            proxy_pass http://ui_server/;

            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            add_header              Front-End-Https   on;
        }

        location /txs/static {
            alias /nginx-txs/staticfiles;
            expires 365d;
        }

        location /txs/ {
            add_header 'Access-Control-Allow-Origin' 'https://safe-ui.surge.wtf' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    Host                $host;
            proxy_redirect off;
            proxy_pass http://txs_app_server/;

            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            add_header              Front-End-Https   on;
        }

        location /cfg/static {
            alias /nginx-cfg/staticfiles;
            expires 365d;
        }

        location /cfg/ {
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            add_header Front-End-Https on;
            proxy_redirect off;
            proxy_pass http://cfg_app_server/;

            proxy_connect_timeout 60s;
            proxy_read_timeout 60s;
        }

        location /cgw/ {
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    Host                $host;
            proxy_redirect off;
            proxy_pass http://cgw_app_server/;

            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            add_header              Front-End-Https   on;
        }

        location /events/ {
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_set_header    Host                $host;
            proxy_redirect off;
            proxy_pass http://events_app_server/events/;

            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            add_header              Front-End-Https   on;
        }
    }
}
